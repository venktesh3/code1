q1 BFS DFS
-----------------------------------------------------------------------------
import java.util.*;
class graph
{   public static void dfshelper(int edges[][] , int sv , boolean visited[])
    {
           System.out.print(sv+" ");
           visited[sv] = true;
           for(int i=0;i<edges.length;i++)
           {
                if(edges[sv][i]==1&&!visited[i])
                {
                      dfshelper(edges , i , visited);
                }
           }
    }

    public static void dfs(int edges[][], int sv)
    {
        boolean visited[] = new boolean[edges.length];
        dfshelper(edges, sv , visited);

    }

  public static void bfshelper(int edges[][] , int sv , boolean visited[])
  {
         Queue<Integer> q = new LinkedList<>();
         q.add(sv);
         visited[sv] = true;
         while(!q.isEmpty())
         {
            int front = q.remove();
            System.out.print(front+" ");
            for(int i=0;i<edges.length;i++)
            {
                if(edges[front][i]==1 && !visited[i])
                {
                    q.add(i);
                    visited[i] = true;
                }
            }
         }
            
    
  }

  public static void bfs(int edges[][] , int sv)
  {
     boolean visited[] = new boolean[edges.length];
     bfshelper(edges, sv, visited);
  }




    public static void main(String[] args) {
        int nvertex;
        int nedges;
        Scanner s = new Scanner(System.in);
        System.out.println("entere the no of vertex = ");
        nvertex = s.nextInt();
        int edges[][] = new int[nvertex][nvertex];
        System.out.println("enter the no of edges = ");
        nedges = s.nextInt();

        for(int i=0;i<nedges;i++)
        {
          System.out.println("enter the vertex 1");;
          int vertex1 = s.nextInt();
          System.out.println("enter the vertex2 = ");
          int vertex2  = s.nextInt();
          edges[vertex1][vertex2] = 1;
          edges[vertex2][vertex1] = 1;
          
        }
   System.out.println("dfs traversal of graph = ");
        dfs(edges, 0);
    System.out.println("bfs traversal = ");
    bfs(edges, 0);
    }



}

----------------------------------------------------


Q kruskal algorithm

import java.util.*;

import javax.xml.transform.Source;
class edge implements Comparable<edge>
{
   public int source;
   public int destination;
   public int weight;

   @Override
   public int  compareTo(edge o) {
    return (this.weight-o.weight);
    
   }
}

class kruskal{
    public static void kruskalg(edge input[] , int nv)
    {
        Arrays.sort(input);
        edge output[] = new edge[nv-1];
        int parent[] = new int[nv];
        for(int i=0;i<nv;i++)
        {
            parent[i] = i;
        }
        int count = 0;  // currrent number of edge

        int i = 0;      // index
        while(count!=nv-1)
        {
            edge current = input[i];
            //detect cycle
            int parentsource = findparent(current.source , parent);
            int parentdest = findparent(current.destination , parent);
            if(parentsource!=parentdest)
            {
                output[count] = current;
                count++;
                parent[parentsource] = parentdest;
            }
            i++;
        }
         System.out.println("source "+" destination"+" weight");

        for(int j = 0;j<count;j++)
        {
            System.out.println(output[j].source+" "+output[j].destination+" "+output[j].weight);
            
        }
    }

    public static int findparent(int v , int parent[])
    {
             if(parent[v] == v)
             {
                return v;

             }
             return findparent(parent[v], parent);

    }
    public static void main(String[] args) {
        Scanner s = new Scanner(System.in);

        int ne, nv;
        System.out.println("enter the no of vertex = ");
        nv = s.nextInt();
        System.out.println("enter the number of edge = ");
        ne = s.nextInt();
        edge input[] = new edge[ne];;
        for(int i=0;i<ne;i++)
        {
           input[i] = new edge();
           System.out.println("enter source = ");
           input[i].source  = s.nextInt();
           System.out.println("enter the destination = ");
           input[i].destination = s.nextInt();
           System.out.println("enter the weight =");
           input[i].weight =  s.nextInt();
          

        }
        kruskalg(input, nv);   
    
    }
}

---------------------------------------------------------------------------------------------------prims algo

import java.util.*;
class prims
{  
    public static int findminvertex(int weight[] , boolean visited[])
    {
        int minvertex = -1;
        for(int i=0;i<weight.length;i++)
        {
            if(!visited[i] && (minvertex==-1||weight[i]<weight[minvertex]))
            {   
                minvertex = i;

            }
           
        }
        return minvertex;
    }

    public static void primsalgo(int edge[][])
    {
         boolean visited[] = new boolean[edge.length];
         int parent[]  = new int[edge.length];
         int weight[] = new int[edge.length];

         weight[0]= 0;
         parent[0] = -1;
         for(int i=1;i<edge.length;i++)
         {
            weight[i]= Integer.MAX_VALUE;
         }
         // SELECT MINIMUM VERTEX
         for(int i=0;i<edge.length;i++)
         {
            int minvertex = findminvertex(weight , visited);
             visited[minvertex] = true;

             // explore unvisited neightbour
             for(int j=0;j<edge.length;j++)
             {
                if(edge[minvertex][j]!=0 &&!visited[j])
                {
                    if(edge[minvertex][j]<weight[j])
                    {
                        weight[j] = edge[minvertex][j];
                        parent[j] = minvertex;
                    }
                }
             }
         }

         // print parent and its i 
         for(int i=1;i<edge.length;i++)
         {
            if(parent[i]<i)
            {
                System.out.println(parent[i]+ " "+ i+" "+ weight[i]);
            }
            else{
                System.out.println(i+" "+parent[i]+" "+weight[i]);
            }
         }
    }
    public static void main(String[] args) {
        int nv , ne;
        Scanner s  = new Scanner(System.in);
        System.out.println("Enter the vertex and edges -= ");
        nv = s.nextInt();
        ne = s.nextInt();
        int edge[][]= new int [nv][nv];

        for(int i = 0;i<ne;i++)
        {
          System.out.println("enter the first vertex = ");
          int fv = s.nextInt();
          System.out.println("enter the second vertex = ");
          int sv = s.nextInt();
          System.out.println("enter the weight = ");
          int wt = s.nextInt();
          edge[fv][sv] = wt;
          edge[sv][fv] = wt;
        }

        primsalgo(edge);

    }
}
------------------------------------------------------------------------------


chatbot

import java.util.Scanner;

public class Chatbot {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Welcome to the Customer Interaction Chatbot!");

        while (true) {
            System.out.print("User: ");
            String userInput = scanner.nextLine();

            String response = getResponse(userInput);
            System.out.println("Chatbot: " + response);

            if (userInput.equalsIgnoreCase("bye")) {
                break;
            }
        }

        System.out.println("Chatbot: Goodbye! Have a great day!");
    }

    private static String getResponse(String userInput) {
        // Add your custom logic here to generate appropriate responses based on user input
        // You can use if-else statements, switch statements, or even implement more complex algorithms

        // Example responses based on simple keywords
        if (userInput.contains("hello") || userInput.contains("hi")) {
            return "Hello! How can I assist you today?";
        } else if (userInput.contains("order")) {
            return "To place an order, please visit our website or contact our sales team.";
        } else if (userInput.contains("payment")) {
            return "We accept various payment methods, including credit cards and PayPal.";
        } else if (userInput.contains("shipping")) {
            return "Our standard shipping time is 3-5 business days.";
        } else if (userInput.contains("refund")) {
            return "For refund requests, please reach out to our customer support team.";
        } else {
            return "I'm sorry, but I couldn't understand your question. Could you please rephrase it?";
        }
    }
}
----------------------------------------------------------------------------
N queens

import java.util.*;

import javax.xml.transform.Source;
class nqueens{




    public static void main(String args[])
    {  System.out.println("ente the n = ");
    Scanner s = new Scanner(System.in);
     int n  = s.nextInt();
        boolean board[][] = new boolean[n][n];
        queens(board, 0);
    
    
    
    
    }

public static int queens(boolean board[][] , int row)
{
     if(row==board.length)
     {
        display(board);
        System.out.println();
        return 1;
     }

     int count = 0;
     for(int col = 0;col<board.length;col++)
     {
        if(issafe(board , row , col))
        {
            board[row][col] = true;
            count+=queens(board, row+1);
            board[row][col] = false;
        }

     }
     return count;
}

public static boolean issafe(boolean board[][] , int row, int col)
{  // checking row
  for(int i=0;i<row;i++)
  {
    if(board[i][col])
    {
        return false;
    }
  }

  //check leftdiagonal

  int maxleft  = Math.min(row, col);
  for(int i=1;i<=maxleft;i++)
  {
    if(board[row-i][col-i])
    {
        return false;
    }
  }

  //check right diagonal

  int maxright = Math.min(row , board.length-col-1);
  
    for(int i=1;i<=maxright;i++)
    {
        if(board[row-i][col+i])
        {
            return false;
        }
    }
  return true;




}

public static void display(boolean[][] board)
{
    for(int i=0;i<board.length;i++)
    {
        for(int j=0;j<board.length;j++)
        {
            if(board[i][j]==true)
            {
                System.out.print("Q");
            }
            else
            {
                System.out.print("X");
            }
        }
        System.out.println();
    }
}


}
------------------------------------------------------------------------------------

dijkstra


import java.util.*;
public class dijkstra {

    public static void dijkstra(int graph[][])
    {
        int v = graph.length;
        boolean visited []= new boolean[v];
        int distance[] = new int[v];
        distance[0] = 0;


        for(int i=1;i<v;i++)
        {
            distance[i] = Integer.MAX_VALUE;
        }

        for(int i=0;i<v-1;i++)
        {
            //find the minimun vertex
            int minvertex = findminvertex(distance , visited);
            visited[minvertex] = true;

            // explore neighbourr
            for(int j=0;j<v;j++)
            {
                if(graph[minvertex][j]!=0 && !visited[j]&&distance[minvertex]!=Integer.MAX_VALUE)
                {
                    int newdist = distance[minvertex]+graph[minvertex][j];

                    if(newdist<distance[j])
                    {
                        distance[j] = newdist;
                    }
                }
            }
        }


        // print the distances
        for(int i=0;i<v;i++)
        {
            System.out.println(i+" "+distance[i]);
        }
    }

    public static int findminvertex(int distance[] , boolean visited[])
    {
        int minvertex = -1;
        for(int i=0;i<distance.length;i++)
        {
            if(!visited[i]&&(minvertex==-1|| distance[i]<distance[minvertex]))
            {
                minvertex = i;

            }
        }

        return minvertex;
    }
    
    public static void main(String[] args) {
        int e , v;
        Scanner s = new Scanner(System.in);
        System.out.println("enter the no of vertex= ");
        v = s.nextInt();
        int graph[][] = new int[v][v];
        System.out.println("enter the e = ");
        e = s.nextInt();
        for(int i=0;i<e;i++)
        {
            System.out.println("enter the vertex  = ");
            int sv = s.nextInt();
            System.out.println("enter the dv = ");
            int dv = s.nextInt();
            System.out.println("enter the weight = ");
            int wt = s.nextInt();
        
            graph[sv][dv] = wt;
            graph[dv][sv] = wt;

        }
        dijkstra(graph);

       

    }
}
---------------------------------------------------------------------------------------------------------------

coloring graph

import java.util.*;
class TUF {
    public static boolean graphColoring(List < Integer > [] G, int[] color, int i, int C) {
        // Your code here
        int n = G.length;
        if (solve(i, G, color, n, C) == true) return true;
        return false;
    }
    private static boolean isSafe(int node, List < Integer > [] G, int[] color, int n, int col) {
        for (int it: G[node]) {
            if (color[it] == col) return false;
        }
        return true;
    }
    private static boolean solve(int node, List < Integer > [] G, int[] color, int n, int m) {
        if (node == n) return true;

        for (int i = 1; i <= m; i++) {
            if (isSafe(node, G, color, n, i)) {
                color[node] = i;
                if (solve(node + 1, G, color, n, m) == true) return true;
                color[node] = 0;
            }
        }
        return false;
    }
    public static void main(String[] args) {
        int N = 4, M = 3;
        List < Integer > [] G = new ArrayList[N];
        for (int i = 0; i < N; i++) {
            G[i] = new ArrayList < > ();
        }
        G[0].add(1);
        G[1].add(0);
        G[1].add(2);
        G[2].add(1);
        G[2].add(3);
        G[3].add(2);
        G[3].add(0);
        G[0].add(3);
        G[0].add(2);
        G[2].add(0);
        int[] color = new int[N];
        boolean ans = graphColoring(G, color, 0, M);
        if (ans == true)
            System.out.println("1");
        else
            System.out.println("0");
    }
}
-----------------------------------------------------------------------------------------------------------------------------

